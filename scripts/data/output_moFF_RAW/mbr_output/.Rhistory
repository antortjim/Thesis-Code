"estimate" = (x$estimate["mean of x"] - x$estimate["mean of y"]),
"method" = x$method,
"df" = x$parameter["df"]))
lfq_signif <- do.call(rbind, lfq_signif_list)
lfq_signif <- lfq_signif %>% as.data.frame
lfq_signif$taxonomy <- maxlfq_results$Taxonomy
colnames(lfq_signif)[2] <- "estimate"
lfq_signif$estimate <- lfq_signif$estimate %>% as.character %>% as.numeric
lfq_signif$p.value <- lfq_signif$p.value %>% as.character %>% as.numeric
lfq_signif <- lfq_signif %>% arrange(p.value)
lfq_signif$index <- 1:nrow(lfq_signif)
# lfq_signif$p.value <= (0.05 * (lfq_signif$index / nrow(lfq_signif)))
lfq_signif$qval <- p.adjust(p = lfq_signif$p.value, method = "fdr")
colnames(lfq_signif)[colnames(lfq_signif) == "Taxonomy"] <- "taxonomy"
group_by(lfq_signif, taxonomy) %>% summarise(count = n())
# Read MSqRob output
RSqM_signif <- read.table("../model/data/RSqM_signif_peptides.txt",sep="\t", header=T) %>% filter(!is.na(taxonomy))
getwd()
file.path(data_dir, "RSqM_signif_peptides.txt")
# Read MSqRob output
RSqM_signif <- read.table(file.path(data_dir, "../../model/RSqM_signif_peptides.txt"),
sep="\t", header=T) %>% filter(!is.na(taxonomy))
# Read MSqRob output
RSqM_signif <- read.table(file.path(data_dir, "../../model/data/RSqM_signif_peptides.txt"),
sep="\t", header=T) %>% filter(!is.na(taxonomy))
group_by(RSqM_signif, taxonomy) %>% summarise(count = n())
group_by(lfq_signif, taxonomy) %>% summarise(count = n())
MQ_histogram_plot <- ggplot(data = lfq_signif, aes(x=estimate, fill = taxonomy)) + geom_histogram(position="dodge")
MQ_density_plot <- ggplot(data = lfq_signif, aes(x=estimate, fill = taxonomy)) + geom_density(alpha=0.5)
MSqRob_histogram_plot <- ggplot(data = RSqM_signif, aes(x=estimate, fill = taxonomy)) + geom_histogram(position="dodge")
MSqRob_density_plot <- ggplot(data = RSqM_signif, aes(x=estimate, fill = taxonomy)) + geom_density(alpha=0.5)
plots <- list(MQ_histogram_plot, MQ_density_plot, MSqRob_histogram_plot, MSqRob_density_plot)
plot_legend <- plots[[1]] %>% get_legend()
plots <- plots %>% lapply(function(x) x + guides(fill=F) + scale_x_continuous(limits = c(-3,6)))
plot_grid(plot_legend, plot_grid(plotlist = plots, nrow = 2, labels = c("MaxQuant", "", "MSqRob","")), nrow=2, rel_heights = c(1,5))
RSqM_signif %>% filter(taxonomy != "Homo sapiens") %>% arrange(estimate) %>%
filter(estimate < 1)
RSqM_signif <- RSqM_signif %>% filter(se < 0.5)
ggplot(RSqM_signif %>% filter(taxonomy == "Homo sapiens"), aes(x=estimate, y=se)) +
geom_point() + coord_cartesian(ylim=c(0,2))
semi_volcano_msqrob <- ggplot(RSqM_signif, aes(y=-log10(qval), x = abs(estimate), col = taxonomy)) +
geom_point(size=0.2) + geom_hline(yintercept=-log10(0.05))
jitter_msqrob <-ggplot(RSqM_signif, aes(y=-log10(qval), x = taxonomy, group = taxonomy)) +
geom_jitter()
volcano_msqrob <- ggplot(RSqM_signif, aes(y=-log10(qval), x = estimate, col = taxonomy)) +
geom_point() + facet_wrap(~taxonomy) + geom_vline(xintercept = 0, linetype="dashed")
histogram_msqrob <- ggplot(RSqM_signif, aes(x = estimate, fill = taxonomy)) +
geom_histogram(position="dodge") + guides(fill=F)
semi_volcano_lfq <- ggplot(lfq_signif, aes(y=-log10(p.value), x = abs(estimate), col = taxonomy)) +
geom_point(size=0.2) + geom_hline(yintercept=-log10(0.05))
jitter_lfq <- ggplot(lfq_signif, aes(y=-log10(p.value), x = taxonomy, group = taxonomy)) +
geom_jitter()
volcano_lfq <- ggplot(lfq_signif, aes(y=-log10(p.value), x = estimate, col = taxonomy)) +
geom_point() + facet_wrap(~taxonomy) + geom_vline(xintercept = 0, linetype="dashed")
histogram_lfq <- ggplot(lfq_signif, aes(x = estimate, fill = taxonomy)) +
geom_histogram(position="dodge") + guides(fill=F)
theme_set(theme_cowplot(font_size=12)) # reduce default font size
plot_list <-list(semi_volcano_msqrob, semi_volcano_lfq) %>% lapply(function(x) x + guides(col=F))
plot_grid(plot_list[[1]], plot_list[[2]],
labels = "AUTO")
RSqM_signif_taxon <- read.table(file = file.path(paste0("RSqM_signif_taxon", ".tsv")),
sep = "\t", header = T) %>%
filter(se < 0.5)
file.path(data_dir, "RSqM_signif_taxon")
paste0(file.path(data_dir, "RSqM_signif_taxon"), ".tsv")
RSqM_signif_taxon <- read.table(file = paste0(file.path(data_dir, "RSqM_signif_taxon"), ".tsv"),
sep = "\t", header = T) %>%
filter(se < 0.5)
group_by(RSqM_signif_taxon, taxonomy) %>% summarise(count = n())
xaxis <- TeX('$|\\log_2(FC)|$')
yaxis <- TeX('$-\\log_{10}(qval)$')
theme_set(theme_gray())
volcano_compomics <- ggplot(
data = RSqM_signif_taxon,
mapping = aes(y=-log10(qval), x = estimate, col = taxonomy)) +
geom_point() +
geom_hline(yintercept=-log10(0.05)) +
xlab(xaxis) + ylab(yaxis) + guides(col=guide_legend(title="Species"))
semi_volcano_compomics <- ggplot(
data = RSqM_signif_taxon,
mapping = aes(y=-log10(qval), x = abs(estimate), col = taxonomy)) +
geom_point() +
geom_hline(yintercept=-log10(0.05)) +
xlab(xaxis) + ylab(yaxis) + guides(col=guide_legend(title="Species"))
semi_volcano_compomics
report_dir <- "/home/antortjim/MEGA/Master/Thesis/Report/plots/"
ggsave(file.path(report_dir, "qvals.png"), height = 7, width = 7)
ggplot(data = RSqM_signif_taxon, aes(x=estimate, fill=taxonomy)) +
geom_histogram(bins=50, position="dodge") +
coord_cartesian(xlim = c(-5,5)) +
scale_x_continuous(breaks = -5:5)
ggsave(file.path(report_dir, "histogram_pipeline.png") , height = 7, width = 7)
plot(
cumsum(RSqM_signif_taxon %>% arrange(qval) %>% .$taxonomy == "Homo sapiens") / nrow(RSqM_signif_taxon %>% filter(taxonomy == "Homo sapiens")),
cumsum(RSqM_signif_taxon %>% arrange(qval) %>% .$taxonomy != "Homo sapiens") / nrow(RSqM_signif_taxon %>% filter(taxonomy != "Homo sapiens")),
type="l", col = "red")
lines(
cumsum(lfq_signif %>% arrange(qval) %>% .$taxonomy == "Homo sapiens") / nrow(lfq_signif %>% filter(taxonomy == "Homo sapiens")),
cumsum(lfq_signif %>% arrange(qval) %>% .$taxonomy != "Homo sapiens") / nrow(lfq_signif %>% filter(taxonomy != "Homo sapiens")),
type="l", col = "green")
abline(a = 0, b = 1)
nrow(RSqM_signif_taxon)
table(RSqM_signif_taxon$taxonomy == "Homo sapiens")
nrow(lfq_signif)
table(lfq_signif$taxonomy == "Homo sapiens")
nrow(RSqM_signif_taxon)
table(RSqM_signif_taxon$taxonomy == "Homo sapiens")
nrow(lfq_signif)
table(lfq_signif$taxonomy == "Homo sapiens")
pipelines <- c("Compomics+MSqRob", "MQ+MaxLFQ", "MQ+MSqRob"
# , "MQ+MSBay"
)
MSBayQ <- read.table(file = "../model/data/MSBayQ.tsv", header=T, sep = "\t")
colnames(MSBayQ)[1] <- "protein"
ROPE <- 0.4
MSBayQ$significance <- ifelse((MSBayQ$hpd_2.5 > ROPE), 0, 1)
roc_data <- rbind(
cbind(select(RSqM_signif_taxon, estimate, qval, taxonomy) %>% rename(significance = qval), method = pipelines[1]),
cbind(select(lfq_signif, estimate, p.value, taxonomy) %>% rename(significance=p.value), method = pipelines[2]),
# cbind(select(MSBayQ, mean, significance, Organism) %>% rename(estimate=mean, taxonomy=Organism), method = pipelines[4]),
cbind(select(RSqM_signif, estimate, qval, taxonomy) %>% rename(significance = qval), method = pipelines[3])
)
roc_data$taxonomy <- roc_data$taxonomy %>% as.character()
roc_data[roc_data$taxonomy == "Escherichia coli (strain K12)", "taxonomy"] <- "E. coli"
MSBayQ <- read.table(file = file.path(data_dir, "../../model/data/MSBayQ.tsv"), header=T, sep = "\t")
colnames(MSBayQ)[1] <- "protein"
ROPE <- 0.4
MSBayQ$significance <- ifelse((MSBayQ$hpd_2.5 > ROPE), 0, 1)
roc_data <- rbind(
cbind(select(RSqM_signif_taxon, estimate, qval, taxonomy) %>% rename(significance = qval), method = pipelines[1]),
cbind(select(lfq_signif, estimate, p.value, taxonomy) %>% rename(significance=p.value), method = pipelines[2]),
# cbind(select(MSBayQ, mean, significance, Organism) %>% rename(estimate=mean, taxonomy=Organism), method = pipelines[4]),
cbind(select(RSqM_signif, estimate, qval, taxonomy) %>% rename(significance = qval), method = pipelines[3])
)
roc_data$taxonomy <- roc_data$taxonomy %>% as.character()
roc_data[roc_data$taxonomy == "Escherichia coli (strain K12)", "taxonomy"] <- "E. coli"
colnames(roc_data) <- c("log2FC", "signif", "Organism", "Tool")
make_plot_data <- function(curve_data, curve="roc") {
control_data <- data.frame(x = NULL, y = NULL, method = NULL)
pipelines <- roc_data$Tool %>% unique
aucs <- rep(0, length(pipelines))
i <- 1
for(pip in pipelines) {
print(pip)
TN <- (curve_data %>% filter(Tool == pip) %>% arrange(signif) %>% .$Organism) == "Homo sapiens"
TP <- (curve_data %>% filter(Tool == pip) %>% arrange(signif) %>% .$Organism) != "Homo sapiens"
if(curve=="roc") {
control_data <- rbind(control_data,
data.frame(x=(cumsum(TN) / sum(TN)), y=(cumsum(TP) / sum(TP)), Tool = pip)
)
aucs[i] <- roc(curve_data %>% filter(Tool == pip) %>% .$Organism == "Homo sapiens",
curve_data %>% filter(Tool == pip) %>% .$signif
)$auc %>% round(2)
} else if (curve=="prc") {
control_data <- rbind(control_data,
data.frame(x=cumsum(TP)/sum(TP), y = cumsum(TP)/(cumsum(TP) + cumsum(TN)), Tool = pip)
)
}
i <- i + 1
}
return(list(control_data = control_data, aucs = aucs))
}
plot_curve <- function(curve_data, curve="roc") {
fpr <- TeX("False Positive Rate ($\\frac{FP}{FP + TN}$)")
fnr <- TeX("False Negative Rate ($\\frac{FN}{FN + TP}$)")
precision <- TeX("Precision ($\\frac{TP}{TP + FP}$)")
xcoord <- Inf
ycoord <- -Inf
pipelines <- curve_data$Tool %>% unique
n <- 4
palette <- c("#b42f32", "#e3e3cd", "#eba631", "black")[1:length(pipelines)]
dd <- make_plot_data(curve_data = curve_data, curve=curve)
curve_data <- dd[[1]]
aucs <- dd[[2]]
curve_plot <- ggplot(data = curve_data, aes(x=x,y=y, col=Tool)) +
geom_line(size=1.2) +
theme_bw() +
theme(legend.position = "top") +
scale_color_manual(values = palette) +
coord_cartesian(ylim=c(0,1))
if(curve == "roc") {
for (i in 1:length(pipelines)) {
curve_plot <- curve_plot +
annotate(geom = "label", x = xcoord, y = ycoord, label=paste0("AUC: ", aucs[i]),
fill=palette[i], color="white", fontface="bold",
hjust = 1.2, vjust = -1*i/2 -(i-0.5))
}
curve_plot <- curve_plot + xlab(fpr) + ylab(fnr) + geom_abline(slope=1, intercept=0, linetype="dashed")
} else {
curve_plot <- curve_plot + xlab(fnr) + ylab(precision) + geom_abline(slope=-1, intercept=1, linetype="dashed")
}
return(curve_plot)
}
plot_curve(roc_data)
plot_curve(roc_data %>% filter(log2FC > 1))
plot_curve(roc_data, curve = "prc")
plot_curve(roc_data, curve = "prc")
roc_data <- rbind(
cbind(select(RSqM_signif_taxon, estimate, qval, taxonomy) %>% rename(significance = qval), method = pipelines[1]),
cbind(select(lfq_signif, estimate, p.value, taxonomy) %>% rename(significance=p.value), method = pipelines[2]),
# cbind(select(MSBayQ, mean, significance, Organism) %>% rename(estimate=mean, taxonomy=Organism), method = pipelines[4]),
cbind(select(RSqM_signif, estimate, qval, taxonomy) %>% rename(significance = qval), method = pipelines[3])
)
roc_data$taxonomy <- roc_data$taxonomy %>% as.character()
roc_data[roc_data$taxonomy == "Escherichia coli (strain K12)", "taxonomy"] <- "E. coli"
colnames(roc_data) <- c("log2FC", "signif", "Organism", "Tool")
make_plot_data <- function(curve_data, curve="roc") {
control_data <- data.frame(x = NULL, y = NULL, method = NULL)
pipelines <- roc_data$Tool %>% unique
aucs <- rep(0, length(pipelines))
i <- 1
for(pip in pipelines) {
print(pip)
TN <- (curve_data %>% filter(Tool == pip) %>% arrange(signif) %>% .$Organism) == "Homo sapiens"
TP <- (curve_data %>% filter(Tool == pip) %>% arrange(signif) %>% .$Organism) != "Homo sapiens"
if(curve=="roc") {
control_data <- rbind(control_data,
data.frame(x=(cumsum(TN) / sum(TN)), y=(cumsum(TP) / sum(TP)), Tool = pip)
)
control_data <- rbind(control_data, data.frame(x=1,y=1, Tool=pip))
aucs[i] <- roc(curve_data %>% filter(Tool == pip) %>% .$Organism == "Homo sapiens",
curve_data %>% filter(Tool == pip) %>% .$signif
)$auc %>% round(2)
} else if (curve=="prc") {
control_data <- rbind(control_data,
data.frame(
x=cumsum(TP)/sum(TP),
y = cumsum(TP)/(cumsum(TP) + cumsum(TN)),
Tool = pip
)
)
control_data <- rbind(control_data, data.frame(x=1,y=0, Tool=pip))
}
i <- i + 1
}
return(list(control_data = control_data, aucs = aucs))
}
plot_curve <- function(curve_data, curve="roc") {
fpr <- TeX("False Positive Rate ($\\frac{FP}{FP + TN}$)")
fnr <- TeX("False Negative Rate ($\\frac{FN}{FN + TP}$)")
precision <- TeX("Precision ($\\frac{TP}{TP + FP}$)")
xcoord <- Inf
ycoord <- -Inf
pipelines <- curve_data$Tool %>% unique
n <- 4
palette <- c("#b42f32", "#e3e3cd", "#eba631", "black")[1:length(pipelines)]
dd <- make_plot_data(curve_data = curve_data, curve=curve)
curve_data <- dd[[1]]
aucs <- dd[[2]]
curve_plot <- ggplot(data = curve_data, aes(x=x,y=y, col=Tool)) +
geom_line(size=1.2) +
theme_bw() +
theme(legend.position = "top") +
scale_color_manual(values = palette) +
coord_cartesian(ylim=c(0,1))
if(curve == "roc") {
for (i in 1:length(pipelines)) {
curve_plot <- curve_plot +
annotate(geom = "label", x = xcoord, y = ycoord, label=paste0("AUC: ", aucs[i]),
fill=palette[i], color="white", fontface="bold",
hjust = 1.2, vjust = -1*i/2 -(i-0.5))
}
curve_plot <- curve_plot + xlab(fpr) + ylab(fnr) + geom_abline(slope=1, intercept=0, linetype="dashed")
} else {
curve_plot <- curve_plot + xlab(fnr) + ylab(precision) + geom_abline(slope=-1, intercept=1, linetype="dashed")
}
return(curve_plot)
}
plot_curve(roc_data)
plot_curve(roc_data %>% filter(log2FC > 1))
plot_curve(roc_data, curve = "prc")
plot_curve(roc_data %>% filter(log2FC > 1), curve = "prc")
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
palette <- rev(gg_color_hue(2))
roc_data$Organism <- factor(roc_data$Organism, levels = c("Homo sapiens", "E. coli"))
box_plot <- ggplot(roc_data, aes(fill = Organism, x = Organism, y = -log10(signif))) +
# geom_jitter() +
geom_boxplot() +
guides(fill=F) +
facet_wrap(~Tool) +
scale_fill_manual(values = palette)
histogram_plot <- ggplot(roc_data, aes(fill = Organism, x = log2FC)) +
# geom_jitter() +
geom_histogram(position="dodge", bins=60) +
facet_wrap(~Tool) +
theme(legend.position = "top") +
coord_cartesian(xlim=c(-3,3)) +
scale_x_continuous(breaks=(-3:3)) +
labs(y = "Frequency")+
scale_fill_manual(values = palette)
MSBayQ$width <- abs(MSBayQ$`hpd_97.5` - MSBayQ$`hpd_2.5`)
ggplot(MSBayQ %>% filter(n_peptides>3), aes(fill = Organism, x = mean)) +
# geom_jitter() +
geom_histogram(position="dodge", bins=60) +
theme(legend.position = "top") +
# coord_cartesian(xlim=c(-3,3)) +
# scale_x_continuous(breaks=(-3:3)) +
labs(y = "Frequency")+
scale_fill_manual(values = palette)
volcano_plot <- ggplot(roc_data, aes(col = Organism, x = log2FC, y = -log10(signif))) +
# geom_jitter() +
geom_point(size=0.2) +
facet_wrap(~Tool) +
theme(legend.position = "top") +
coord_cartesian(xlim=c(-3,3)) +
scale_x_continuous(breaks=(-3:3)) +
guides(col = guide_legend(override.aes = list(size = 2))) +
scale_color_manual(values = palette)
combined_plot <- plot_grid(histogram_plot,
volcano_plot + theme(legend.position = "none") + geom_hline(yintercept = -log10(0.05), linetype="dashed"),
box_plot + geom_hline(yintercept = -log10(0.05), linetype="dashed"),
nrow=3, labels=c("A","B","C"), align = "v")
combined_plot
combined_plot
library("ggplot2")
library("dplyr")
library("stringr")
library("viridis")
library("cowplot")
library("tidyr")
library(Cairo)
library(latex2exp)
theme_set(theme_bw())
rm(list = ls())
home_dir <- ifelse(Sys.info()["sysname"] == "Windows", "//hest/aoj", "/z/home/aoj")
exp_dir <- "thesis/genedata/maxlfq"
input_dir <- file.path(home_dir, exp_dir, "/peptideShaker_out/PSM_reports/output_moff_RAW/mbr_output")
thesis_report_dir <- "C:/Users/aoj/OneDrive - Novozymes A S/Thesis-Report/"
setwd(input_dir)
column_names <- paste0("Run ", 1:3)
combns <- combn(column_names, m = 2)
combns_names <- apply(combns, 2, function(x) paste(x, collapse = " - "))
color <- T
mbr_report_3 <- read.table(file = "20070904_CL_Orbi4_Offgel_XIC_Hela60_Ecoli10_black_Frac13_3_match.txt", sep = "\t",header=T,stringsAsFactors = F)
mbr_report_2 <- read.table(file = "20070904_CL_Orbi4_Offgel_XIC_Hela60_Ecoli10_green_Frac13_2_match.txt", sep = "\t",header=T,stringsAsFactors = F)
mbr_report_1 <- read.table(file = "20070904_CL_Orbi4_Offgel_XIC_Hela60_Ecoli10_red_Frac13_1_match.txt", sep = "\t",header=T,stringsAsFactors = F)
mbr_report_1$replicate <- column_names[1]
mbr_report_2$replicate <- column_names[2]
mbr_report_3$replicate <- column_names[3]
mbr_report <- rbind(mbr_report_1, mbr_report_2, mbr_report_3)
mbr_summary <- group_by(mbr_report, replicate, matched) %>% summarise(count = n())
sources <- c("MS1", "MBR")
mbr_summary$matched <- factor(ifelse(mbr_summary$matched == 0, sources[1], sources[2]),
levels = rev(sources))
run_labels <- 1:3
names(run_labels) <- column_names
ggplot(mbr_summary, aes(x = replicate, y = count/1e3, fill=matched)) +
geom_bar(stat="identity") +
scale_fill_viridis(discrete = T) +
guides(fill=guide_legend(title="Source")) +
labs(x="Run", y=TeX("# 10^3 Matches")) +
scale_x_discrete(labels=run_labels) +
theme_bw(base_size=20)
home_dir <- ifelse(Sys.info()["sysname"] == "Windows", "//hest/aoj",
ifelse(Sys.info()["user"] == "aoj", "/z/home/aoj",
"/home/antortjim/"))
data_dir <- ifelse(Sys.info()["user"] == "aoj", "thesis/genedata/maxlfq/",
"MEGA/Master/Thesis/Code/scripts/data")
home_dir <- ifelse(Sys.info()["sysname"] == "Windows", "//hest/aoj",
ifelse(Sys.info()["user"] == "aoj", "/z/home/aoj",
"/home/antortjim/"))
data_dir <- ifelse(Sys.info()["user"] == "aoj", "thesis/genedata/maxlfq/",
"MEGA/Master/Thesis/Code/scripts/data")
data_dir
data_dir
thesis_report_dir <- file.path(home_dir, ifelse(Sys.info()["sysname"] == "Windows",
"OneDrive - Novozymes A S/Thesis-Report/",
"MEGA/Master/Thesis/Report"))
thesis_report_dir
thesis_report_dir <- file.path(home_dir, ifelse(Sys.info()["sysname"] == "Windows",
"OneDrive - Novozymes A S/Thesis-Report",
"MEGA/Master/Thesis/Report"))
input_dir
data_dir
input_dir <- file.path(home_dir, data_dir, "output_moff_RAW/mbr_output")
setwd(input_dir)
input_dir
setwd(input_dir)
input_dir
setwd(input_dir)
input_dir
input_dir <- file.path(home_dir, data_dir, "output_moFF_RAW/mbr_output")
thesis_report_dir <- file.path(home_dir, ifelse(Sys.info()["sysname"] == "Windows",
"OneDrive - Novozymes A S/Thesis-Report",
"MEGA/Master/Thesis/Report"))
setwd(input_dir)
column_names <- paste0("Run ", 1:3)
combns <- combn(column_names, m = 2)
combns_names <- apply(combns, 2, function(x) paste(x, collapse = " - "))
color <- T
mbr_report_3 <- read.table(file = "20070904_CL_Orbi4_Offgel_XIC_Hela60_Ecoli10_black_Frac13_3_match.txt", sep = "\t",header=T,stringsAsFactors = F)
mbr_report_2 <- read.table(file = "20070904_CL_Orbi4_Offgel_XIC_Hela60_Ecoli10_green_Frac13_2_match.txt", sep = "\t",header=T,stringsAsFactors = F)
mbr_report_1 <- read.table(file = "20070904_CL_Orbi4_Offgel_XIC_Hela60_Ecoli10_red_Frac13_1_match.txt", sep = "\t",header=T,stringsAsFactors = F)
mbr_report_3 <- read.table(file = "20070904_CL_Orbi4_Offgel_XIC_Hela60_Ecoli10_black_Frac13_3_match.txt", sep = "\t",header=T,stringsAsFactors = F)
input_dir <- file.path(home_dir, data_dir, "output_moFF_RAW/mbr_output")
thesis_report_dir <- file.path(home_dir, ifelse(Sys.info()["sysname"] == "Windows",
"OneDrive - Novozymes A S/Thesis-Report",
"MEGA/Master/Thesis/Report"))
setwd(input_dir)
column_names <- paste0("Run ", 1:3)
combns <- combn(column_names, m = 2)
combns_names <- apply(combns, 2, function(x) paste(x, collapse = " - "))
color <- T
mbr_report_3 <- read.table(file = "20070904_CL_Orbi4_Offgel_XIC_Hela60_Ecoli10_black_Frac13_3_match.txt", sep = "\t",header=T,stringsAsFactors = F)
mbr_report_2 <- read.table(file = "20070904_CL_Orbi4_Offgel_XIC_Hela60_Ecoli10_green_Frac13_2_match.txt", sep = "\t",header=T,stringsAsFactors = F)
mbr_report_1 <- read.table(file = "20070904_CL_Orbi4_Offgel_XIC_Hela60_Ecoli10_red_Frac13_1_match.txt", sep = "\t",header=T,stringsAsFactors = F)
mbr_report_1$replicate <- column_names[1]
mbr_report_2$replicate <- column_names[2]
mbr_report_3$replicate <- column_names[3]
mbr_report <- rbind(mbr_report_1, mbr_report_2, mbr_report_3)
mbr_summary <- group_by(mbr_report, replicate, matched) %>% summarise(count = n())
sources <- c("MS1", "MBR")
mbr_summary$matched <- factor(ifelse(mbr_summary$matched == 0, sources[1], sources[2]),
levels = rev(sources))
run_labels <- 1:3
names(run_labels) <- column_names
ggplot(mbr_summary, aes(x = replicate, y = count/1e3, fill=matched)) +
geom_bar(stat="identity") +
scale_fill_viridis(discrete = T) +
guides(fill=guide_legend(title="Source")) +
labs(x="Run", y=TeX("# 10^3 Matches")) +
scale_x_discrete(labels=run_labels) +
theme_bw(base_size=20)
df1 <- select(mbr_report_1, peptide, rt, replicate, matched) %>% arrange(rt)
df1 <- df1[!duplicated(df1$peptide),]
df2 <- select(mbr_report_2, peptide, rt, replicate,matched) %>% arrange(rt)
df2 <- df2[!duplicated(df2$peptide),]
df3 <- select(mbr_report_3, peptide, rt, replicate,matched) %>% arrange(rt)
df3 <- df3[!duplicated(df3$peptide),]
df <- rbind(df1, df2, df3) %>%
# filter(peptide != "") %>%
arrange(peptide, replicate) %>%
mutate(rt = rt/60)
matched <- df %>% select(-rt) %>% spread(key = replicate, value = matched)
matched_pairwise <- apply(combns, 2, function(x) matched[, x[1]] | matched[, x[2]]) %>%
ifelse(., sources[2], sources[1])
mbr_summary <- ggplot(mbr_summary, aes(x = replicate, y = count/1e3, fill=matched)) +
geom_bar(stat="identity") +
scale_fill_viridis(discrete = T) +
guides(fill=guide_legend(title="Source")) +
labs(x="Run", y=TeX("# 10^3 Matches")) +
scale_x_discrete(labels=run_labels) +
theme_bw(base_size=20)
ggsave(filename = file.path(thesis_report_dir, "plots", "mbr_summary.png"),
width=6, height=3)
df1 <- select(mbr_report_1, peptide, rt, replicate, matched) %>% arrange(rt)
df1 <- df1[!duplicated(df1$peptide),]
df2 <- select(mbr_report_2, peptide, rt, replicate,matched) %>% arrange(rt)
df2 <- df2[!duplicated(df2$peptide),]
df3 <- select(mbr_report_3, peptide, rt, replicate,matched) %>% arrange(rt)
df3 <- df3[!duplicated(df3$peptide),]
df <- rbind(df1, df2, df3) %>%
# filter(peptide != "") %>%
arrange(peptide, replicate) %>%
mutate(rt = rt/60)
matched <- df %>% select(-rt) %>% spread(key = replicate, value = matched)
matched_pairwise <- apply(combns, 2, function(x) matched[, x[1]] | matched[, x[2]]) %>%
ifelse(., sources[2], sources[1])
colnames(matched_pairwise) <- combns_names
matched <- cbind(matched$peptide, matched_pairwise) %>% as.data.frame()
df <- df %>% select(-matched)
df <- df %>% spread(key = replicate, value = rt)
# df <- df[complete.cases(df),]
df <- cbind(df, matched)
diffs <- apply(combns, 2, function(x) df[,x[1]] - df[,x[2]]) %>% as.data.frame
colnames(diffs) <- combns_names
combns <- list(1:2, 3:4, 5:6) %>% lapply(function(x) combns[c(x[1], x[2])])
i <- 1
df_long <- data.frame(peptide=NULL, run=NULL, diff=NULL, Source=NULL, pair=NULL)
for(cmb in combns) {
print(cmb)
df_sub <- cbind(df[, c("peptide", cmb[1])], diffs[,i], matched_pairwise[, i], colnames(diffs)[i])
colnames(df_sub)[2:5] <- c("run", "diff", "Source", "pair")
df_long <- rbind(df_long, df_sub)
i <- i + 1
}
p <- ggplot(df_long %>% filter(abs(diff) < 3.5), aes(x=run, y=diff)) +
facet_wrap(
facets = ~pair, ncol=3
)
p
if(color) {
p <- p + geom_point(aes(col=Source), size=.05)
} else {
p <- p + geom_point()
}
p <- p + geom_hline(yintercept = 0, linetype="dashed") +
viridis::scale_color_viridis(discrete=T)
p <- p + labs(x = "RT in first MS run [min]")
p <- p + labs(y = "RT diff btw. runs [min]")
p <- p + theme_bw(base_size=20)
p <- p + guides(col = guide_legend(override.aes = list(size = 5)))
p <- p + theme(legend.position = "top")
p <- p + coord_cartesian(ylim = c(-2,2))
p
ggsave(filename = file.path(thesis_report_dir, "plots", "mbr.png"),
width=6, height=5)
plot_grid(mbr_summary, p, nrow=2, labels="AUTO")
plot_grid(mbr_summary + theme(legend.position = "top"), p, nrow=2, labels="AUTO")
plot_grid(mbr_summary + theme(legend.position = "top"), p + guides(col=F), nrow=2, labels="AUTO")
ggsave(filename = file.path(thesis_report_dir, "plots", "mbr_combined.png"),
width=6, height=5)
thesis_report_dir
ggsave(filename = file.path(thesis_report_dir, "plots", "mbr_combined.png"),
width=6, height=10)
ggsave(filename = file.path(thesis_report_dir, "plots", "mbr_combined.png"),
width=5, height=9)
ggsave(filename = file.path(thesis_report_dir, "plots", "mbr_combined.png"),
width=7, height=9)
